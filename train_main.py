#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from functools import reduce
import numpy as np
from keras.models import Sequential
from keras.layers import Dense

from gpaulo.backup import save

MODELS = "models"
NAME = "tictactoe"

# learn movement in different orientations
def rotations(x1):
    #x1 = x1[..., np.newaxis]
    x2 = np.rot90(x1)
    x3 = np.rot90(x2)
    x4 = np.rot90(x3)
    return map(lambda x: x.reshape(9), [x1, x2, x3, x4])

def rot_array(arr):
    return np.array([i for data in arr for i in rotations(data)])

# data[:, 0] => X * -1
# data[:, 1] => Y
data = np.array([
    # side danger
    [[[0,0,1], [0,0,1], [0,0,0]],  [[0,0,0], [0,0,0], [0,0,1]]],
    [[[0,-1,1], [-1,0,1], [0,0,0]],  [[0,0,0], [0,0,0], [0,0,1]]],
    [[[0,0,1], [0,-1,1], [-1,0,0]],  [[0,0,0], [0,0,0], [0,0,1]]],
    [[[0,0,1], [0,0,0], [0,0,1]],  [[0,0,0], [0,0,1], [0,0,0]]],
    [[[-1,0,1], [0,-1,0], [0,0,1]],  [[0,0,0], [0,0,1], [0,0,0]]],
    [[[-1,0,1], [0,0,0], [0,-1,1]],  [[0,0,0], [0,0,1], [0,0,0]]],
    [[[0,0,0], [0,0,1], [0,0,1]],  [[0,0,1], [0,0,0], [0,0,0]]],
    [[[0,-1,0], [-1,0,1], [0,0,1]],  [[0,0,1], [0,0,0], [0,0,0]]],
    [[[-1,0,0], [0,-1,1], [0,0,1]],  [[0,0,1], [0,0,0], [0,0,0]]],
    [[[0,1,1], [0,0,0], [0,0,0]],  [[1,0,0], [0,0,0], [0,0,0]]],
    [[[0,1,1], [0,-1,0], [0,-1,0]],  [[1,0,0], [0,0,0], [0,0,0]]],
    [[[0,1,1], [-1,0,0], [0,0,-1]],  [[1,0,0], [0,0,0], [0,0,0]]],
    [[[1,1,0], [0,0,0], [0,0,0]],  [[0,0,1], [0,0,0], [0,0,0]]],
    [[[1,1,0], [0,-1,0], [0,-1,0]],  [[0,0,1], [0,0,0], [0,0,0]]],
    [[[1,1,0], [-1,0,0], [0,-1,0]],  [[0,0,1], [0,0,0], [0,0,0]]],
    [[[1,1,0], [-1,0,0], [0,0,-1]],  [[0,0,1], [0,0,0], [0,0,0]]],
    [[[1,0,1], [0,0,0], [0,0,0]],  [[0,1,0], [0,0,0], [0,0,0]]],
    [[[1,0,1], [-1,0,0], [-1,0,0]],  [[0,1,0], [0,0,0], [0,0,0]]],
    [[[1,0,1], [0,0,-1], [0,-1,0]],  [[0,1,0], [0,0,0], [0,0,0]]],

    # central danger
    [[[0,1,0], [0,1,0], [0,0,0]],  [[0,0,0], [0,0,0], [0,1,0]]],
    [[[-1,1,-1], [0,1,0], [0,0,0]],  [[0,0,0], [0,0,0], [0,1,0]]],
    [[[0,1,0], [-1,1,-1], [0,0,0]],  [[0,0,0], [0,0,0], [0,1,0]]],
    [[[-1,1,0], [0,1,-1], [0,0,0]],  [[0,0,0], [0,0,0], [0,1,0]]],
    [[[0,1,0], [0,1,-1], [-1,0,0]],  [[0,0,0], [0,0,0], [0,1,0]]],
    [[[0,1,0], [0,0,0], [0,1,0]],  [[0,0,0], [0,1,0], [0,0,0]]],
    [[[-1,1,0], [0,0,-1], [0,1,0]],  [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,1,-1], [-1,0,0], [0,1,0]],  [[0,0,0], [0,1,0], [0,0,0]]],
    [[[-1,1,-1], [0,0,0], [0,1,0]],  [[0,0,0], [0,1,0], [0,0,0]]],

    [[[0,0,0], [0,1,0], [0,1,0]],  [[0,1,0], [0,0,0], [0,0,0]]],

    [[[0,0,0], [0,1,1], [0,0,0]],  [[0,0,0], [1,0,0], [0,0,0]]],
    [[[0,0,-1], [0,1,1], [0,0,-1]],  [[0,0,0], [1,0,0], [0,0,0]]],
    [[[0,0,-1], [0,1,1], [-1,0,0]],  [[0,0,0], [1,0,0], [0,0,0]]],
    [[[-1,0,0], [0,1,1], [0,0,-1]],  [[0,0,0], [1,0,0], [0,0,0]]],

    # diagonal danger
    [[[1,0,0], [0,1,0], [0,0,0]],  [[0,0,0], [0,0,0], [0,0,1]]],
    [[[1,-1,0], [0,1,0], [0,-1,0]],  [[0,0,0], [0,0,0], [0,0,1]]],
    [[[1,0,-1], [0,1,0], [0,-1,0]],  [[0,0,0], [0,0,0], [0,0,1]]],
    [[[1,-1,0], [0,1,0], [-1,0,0]],  [[0,0,0], [0,0,0], [0,0,1]]],
    [[[0,0,0], [0,1,0], [0,0,1]],  [[1,0,0], [0,0,0], [0,0,0]]],
    [[[0,-1,0], [0,1,0], [0,-1,1]],  [[1,0,0], [0,0,0], [0,0,0]]],
    [[[0,0,-1], [0,1,0], [-1,0,1]],  [[1,0,0], [0,0,0], [0,0,0]]],
    [[[0,-1,0], [0,1,0], [-1,0,1]],  [[1,0,0], [0,0,0], [0,0,0]]],
    [[[1,0,0], [0,0,0], [0,0,1]],  [[0,0,0], [0,1,0], [0,0,0]]],
    [[[1,-1,0], [-1,0,0], [0,0,1]],  [[0,0,0], [0,1,0], [0,0,0]]],
    [[[1,0,-1], [-1,0,0], [0,0,1]],  [[0,0,0], [0,1,0], [0,0,0]]],
    [[[1,0,-1], [0,0,-1], [0,0,1]],  [[0,0,0], [0,1,0], [0,0,0]]],
    [[[1,0,-1], [-1,0,0], [-1,0,1]],  [[0,0,0], [0,1,0], [0,0,0]]],
    [[[1,0,-1], [0,0,-1], [-1,0,1]],  [[0,0,0], [0,1,0], [0,0,0]]],

    [[[0,0,1], [0,1,0], [0,0,0]],  [[0,0,0], [0,0,0], [1,0,0]]],
    [[[0,-1,1], [0,1,0], [0,-1,0]],  [[0,0,0], [0,0,0], [1,0,0]]],
    [[[-1,0,1], [0,1,0], [0,0,-1]],  [[0,0,0], [0,0,0], [1,0,0]]],
    [[[-1,-1,1], [0,1,0], [0,0,-1]],  [[0,0,0], [0,0,0], [1,0,0]]],
    [[[-1,-1,1], [0,1,0], [0,0,0]],  [[0,0,0], [0,0,0], [1,0,0]]],
    [[[0,0,1], [0,1,0], [0,-1,-1]],  [[0,0,0], [0,0,0], [1,0,0]]],
    [[[0,0,1], [-1,1,-1], [0,0,0]],  [[0,0,0], [0,0,0], [1,0,0]]],
    [[[0,0,1], [0,1,-1], [0,0,-1]],  [[0,0,0], [0,0,0], [1,0,0]]],

    # common movements
    [[[1,-1,0], [0,0,0], [0,0,0]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[1,0,-1], [0,0,0], [0,0,0]], [[0,0,0], [0,0,0], [0,0,1]]],
    [[[1,0,0], [0,0,0], [-1,0,0]], [[0,0,0], [0,0,0], [0,0,1]]],
    [[[-1,1,0], [0,0,0], [0,0,0]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[-1,0,1], [0,0,0], [0,0,0]], [[0,0,0], [0,0,0], [1,0,0]]],
    [[[0,1,-1], [0,0,0], [0,0,0]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,-1,1], [0,0,0], [0,0,0]], [[0,0,0], [0,1,0], [0,0,0]]],

    [[[0,0,0], [0,-1,1], [0,0,0]], [[0,0,1], [0,0,0], [0,0,0]]],
    [[[0,0,0], [0,1,-1], [0,0,0]], [[0,0,0], [0,0,0], [0,0,1]]],
    [[[0,0,0], [-1,0,1], [0,0,0]], [[0,0,0], [0,0,0], [0,0,1]]],
    [[[0,0,0], [1,0,-1], [0,0,0]], [[0,0,0], [0,0,0], [1,0,0]]],
    [[[0,0,0], [1,-1,0], [0,0,0]], [[1,0,0], [0,0,0], [0,0,0]]],
    [[[0,0,0], [-1,1,0], [0,0,0]], [[1,0,0], [0,0,0], [0,0,0]]],
    [[[0,0,0], [1,-1,1], [0,0,0]], [[1,0,1], [0,0,0], [1,0,1]]], # WTF?
    [[[0,0,0], [-1,1,-1], [0,0,0]], [[1,0,0], [0,0,0], [0,0,1]]],

    [[[1,0,-1], [-1,0,0], [0,1,0]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[-1,0,0], [0,1,0], [0,0,0]], [[0,0,0], [0,0,0], [1,0,0]]],
    [[[1,0,0], [0,-1,0], [0,0,0]], [[0,0,0], [0,0,0], [1,0,0]]],
    [[[0,0,1], [0,-1,0], [0,0,0]], [[0,0,0], [0,0,0], [0,0,1]]],

    # fixes
    [[[-1,0,1], [0,-1,0], [0,0,1]], [[0,0,0], [0,0,1], [0,0,0]]],
    [[[1,0,-1], [0,-1,0], [1,0,0]], [[0,0,0], [0,0,1], [0,0,0]]],
    [[[0,0,1], [0,-1,-1], [1,0,0]], [[0,0,0], [1,0,0], [0,0,0]]],
    [[[0,1,0], [-1,-1,0], [1,0,0]], [[0,0,0], [0,0,1], [0,0,0]]],

    [[[1,0,0], [-1,0,-1], [1,0,0]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[-1,0,-1], [1,0,0], [1,0,0]], [[0,1,0], [0,0,0], [0,0,0]]],
    [[[-1,0,1], [1,-1,-1], [1,0,0]], [[0,0,0], [0,0,0], [0,0,1]]],

    [[[0,0,0], [0,1,-1], [0,0,-1]], [[0,0,1], [0,0,0], [0,0,0]]],
    [[[0,0,-1], [0,1,-1], [0,0,0]], [[0,0,0], [0,0,0], [0,0,1]]],
    [[[0,0,-1], [0,1,0], [0,0,-1]], [[0,0,0], [0,0,1], [0,0,0]]],
    [[[-1,0,0], [-1,1,0], [0,0,0]], [[0,0,0], [0,0,0], [1,0,0]]],
    [[[0,0,0], [-1,1,0], [-1,0,0]], [[1,0,0], [0,0,0], [0,0,0]]],
    [[[-1,0,0], [0,1,0], [-1,0,0]], [[0,0,0], [1,0,0], [0,0,0]]],

    [[[1,0,-1], [-1,1,-1], [0,0,0]], [[0,0,0], [0,0,0], [0,0,1]]],
    [[[1,0,-1], [-1,1,-1], [0,0,0]], [[0,0,0], [0,0,0], [0,0,1]]],
    [[[1,0,-1], [-1,1,-1], [0,0,0]], [[0,0,0], [0,0,0], [0,0,1]]],
    [[[1,0,-1], [-1,1,-1], [0,0,0]], [[0,0,0], [0,0,0], [0,0,1]]],
    [[[1,0,-1], [-1,1,-1], [0,0,0]], [[0,0,0], [0,0,0], [0,0,1]]],
    [[[1,0,-1], [-1,1,-1], [0,0,0]], [[0,0,0], [0,0,0], [0,0,1]]],
])

# apply rotations
X = rot_array(data[:, 0])
Y = rot_array(data[:, 1])

# strategy movements
strat = np.array([
    # counter strategy
    [[[0,0,0], [0,0,0], [-1,0,0]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,0,0], [0,0,0], [-1,0,0]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,0,0], [0,0,0], [-1,0,0]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,0,0], [0,0,0], [-1,0,0]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,0,0], [0,0,0], [-1,0,0]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,0,0], [0,0,0], [-1,0,0]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,0,0], [0,0,0], [-1,0,0]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,0,0], [0,0,0], [-1,0,0]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,0,0], [0,0,0], [0,0,-1]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,0,0], [0,0,0], [0,0,-1]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,0,0], [0,0,0], [0,0,-1]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,0,0], [0,0,0], [0,0,-1]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,0,0], [0,0,0], [0,0,-1]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,0,0], [0,0,0], [0,0,-1]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,0,0], [0,0,0], [0,0,-1]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,0,0], [0,0,0], [0,0,-1]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,0,0], [0,0,0], [0,0,-1]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,0,0], [0,0,0], [0,0,-1]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,0,0], [0,0,0], [0,0,-1]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,0,0], [0,0,0], [0,0,-1]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,0,0], [0,0,0], [0,0,-1]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,0,0], [0,0,0], [0,0,-1]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,0,0], [0,0,0], [0,0,-1]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,0,0], [0,0,0], [0,0,-1]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,0,-1], [0,0,0], [0,0,0]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,0,-1], [0,0,0], [0,0,0]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,0,-1], [0,0,0], [0,0,0]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,0,-1], [0,0,0], [0,0,0]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,0,-1], [0,0,0], [0,0,0]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,0,-1], [0,0,0], [0,0,0]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,0,-1], [0,0,0], [0,0,0]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,0,-1], [0,0,0], [0,0,0]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[-1,0,0], [0,0,0], [0,0,0]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[-1,0,0], [0,0,0], [0,0,0]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[-1,0,0], [0,0,0], [0,0,0]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[-1,0,0], [0,0,0], [0,0,0]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[-1,0,0], [0,0,0], [0,0,0]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[-1,0,0], [0,0,0], [0,0,0]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[-1,0,0], [0,0,0], [0,0,0]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[-1,0,0], [0,0,0], [0,0,0]], [[0,0,0], [0,1,0], [0,0,0]]],

    # center start
    [[[0,0,-1], [0,1,0], [0,0,0]], [[1,0,0], [0,0,0], [0,0,1]]], # WTF?

    [[[0,0,0], [0,-1,0], [0,0,0]], [[0,0,0], [0,0,0], [0,0,1]]],
    [[[0,0,0], [0,-1,0], [0,0,0]], [[0,0,0], [0,0,0], [0,0,1]]],
    [[[0,0,0], [0,-1,0], [0,0,0]], [[0,0,0], [0,0,0], [0,0,1]]],
    [[[0,0,0], [0,-1,0], [0,0,0]], [[0,0,0], [0,0,0], [0,0,1]]],
    [[[0,0,0], [0,-1,0], [0,0,0]], [[0,0,0], [0,0,0], [0,0,1]]],

    # my strategy 
    [[[0,0,0], [0,-1,0], [1,0,0]], [[0,0,1], [0,0,0], [0,0,0]]],
    [[[1,0,0], [0,-1,0], [0,0,0]], [[0,0,0], [0,0,0], [0,0,1]]],
    [[[0,0,1], [0,-1,0], [0,0,0]], [[0,0,0], [0,0,0], [1,0,0]]],
    [[[1,0,0], [0,-1,0], [0,0,0]], [[0,0,0], [0,0,0], [0,0,1]]],
    [[[0,0,0], [0,-1,0], [1,0,0]], [[0,0,1], [0,0,0], [0,0,0]]],
    [[[1,0,0], [0,-1,0], [0,0,0]], [[0,0,0], [0,0,0], [0,0,1]]],
    [[[0,0,1], [0,-1,0], [0,0,0]], [[0,0,0], [0,0,0], [1,0,0]]],
    [[[1,0,0], [0,-1,0], [0,0,0]], [[0,0,0], [0,0,0], [0,0,1]]],
    [[[0,0,0], [0,-1,0], [1,0,0]], [[0,0,1], [0,0,0], [0,0,0]]],
    [[[1,0,0], [0,-1,0], [0,0,0]], [[0,0,0], [0,0,0], [0,0,1]]],
    [[[0,0,1], [0,-1,0], [0,0,0]], [[0,0,0], [0,0,0], [1,0,0]]],
    [[[1,0,0], [0,-1,0], [0,0,0]], [[0,0,0], [0,0,0], [0,0,1]]],

    [[[0,0,-1], [0,1,0], [-1,0,0]], [[0,0,0], [1,0,1], [0,0,0]]],
    [[[-1,0,0], [0,1,0], [0,0,-1]], [[0,0,0], [1,0,1], [0,0,0]]],
    [[[0,0,-1], [0,1,0], [-1,0,0]], [[0,0,0], [1,0,1], [0,0,0]]],
    [[[-1,0,0], [0,1,0], [0,0,-1]], [[0,0,0], [1,0,1], [0,0,0]]],
    [[[0,0,-1], [0,1,0], [-1,0,0]], [[0,0,0], [1,0,1], [0,0,0]]],
    [[[-1,0,0], [0,1,0], [0,0,-1]], [[0,0,0], [1,0,1], [0,0,0]]],
    [[[0,0,-1], [0,1,0], [-1,0,0]], [[0,0,0], [1,0,1], [0,0,0]]],
    [[[-1,0,0], [0,1,0], [0,0,-1]], [[0,0,0], [1,0,1], [0,0,0]]],
    [[[0,0,-1], [0,1,0], [-1,0,0]], [[0,0,0], [1,0,1], [0,0,0]]],
    [[[-1,0,0], [0,1,0], [0,0,-1]], [[0,0,0], [1,0,1], [0,0,0]]],
    [[[0,0,-1], [0,1,0], [-1,0,0]], [[0,0,0], [1,0,1], [0,0,0]]],
    [[[-1,0,0], [0,1,0], [0,0,-1]], [[0,0,0], [1,0,1], [0,0,0]]],

    [[[0,0,0], [-1,0,0], [1,0,0]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,-1,0], [0,0,0], [1,0,0]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,0,0], [0,0,-1], [1,0,0]], [[0,0,0], [0,1,0], [0,0,0]]],
    [[[0,0,0], [0,0,0], [1,-1,0]], [[0,0,0], [0,1,0], [0,0,0]]],

    [[[0,0,-1], [0,0,0], [1,0,0]], [[1,0,0], [0,0,0], [0,0,1]]],
    [[[1,0,0], [0,0,0], [0,0,-1]], [[0,0,1], [0,0,0], [1,0,0]]],
    [[[0,0,1], [0,0,0], [-1,0,0]], [[1,0,0], [0,0,0], [0,0,1]]],
    [[[-1,0,0], [0,0,0], [0,0,1]], [[0,0,1], [0,0,0], [1,0,0]]],

    [[[0,0,0], [0,0,0], [1,0,-1]], [[1,0,1], [0,0,0], [0,0,0]]],
    [[[-1,0,0], [0,0,0], [1,0,0]], [[0,0,1], [0,0,0], [0,0,1]]],
    [[[0,0,-1], [0,0,0], [0,0,1]], [[1,0,0], [0,0,0], [1,0,0]]],
    [[[-1,0,1], [0,0,0], [0,0,0]], [[0,0,0], [0,0,0], [1,0,1]]],

    [[[0,0,0], [0,0,0], [-1,0,1]], [[1,0,1], [0,0,0], [0,0,0]]],
    [[[1,0,0], [0,0,0], [-1,0,0]], [[0,0,1], [0,0,0], [0,0,1]]],
    [[[0,0,1], [0,0,0], [0,0,-1]], [[1,0,0], [0,0,0], [1,0,0]]],
    [[[1,0,-1], [0,0,0], [0,0,0]], [[0,0,0], [0,0,0], [1,0,1]]],
])

# some mutations
X = np.concatenate([ X, X*-1, rot_array(strat[:, 0]) ])
Y = np.concatenate([ Y, Y, rot_array(strat[:, 1]) ])

# build neural network
model = Sequential()
model.add(Dense(13, activation='relu', input_dim=9))
model.add(Dense(15, activation='relu'))
model.add(Dense(10, activation='relu'))
model.add(Dense(10, activation='relu'))
model.add(Dense(9, activation='sigmoid'))

# compile and train
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(X, Y, epochs=2000, batch_size=50)

# test and backup
scores = model.evaluate(X, Y)
print("neural network %s: %.2f%%" % (model.metrics_names[1], scores[1]*100))
save(model, NAME)
